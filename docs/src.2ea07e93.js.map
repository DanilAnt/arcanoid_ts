{"version":3,"sources":["sprites/Ball.ts","sprites/Paddle.ts","view/CanvasView.ts","Collision.ts","setup.ts","sprites/Brick.ts","helpers.ts","index.ts"],"names":[],"mappings":"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","file":"src.2ea07e93.js","sourceRoot":"../src","sourcesContent":["import { Vector } from \"~/types\";\n\nexport class Ball{\n    \n    private ballImage = new Image();\nprivate speed :Vector;\n\n    constructor(\n        private ballSize: number,\n        private position: Vector,\n        speed: number,\n        image : string\n    ){\n        this.speed = {\n            x: speed,\n            y: -speed\n        }\n        this.ballImage.src = image;\n\n    }\n\n\n    get width() : number {\n        return this.ballSize\n    }\n\n    get height() : number {\n        return this.ballSize\n    }\n\n    get pos():Vector {\n        return this.position\n    }\n\n    get image(){\n        return this.ballImage\n    }\n\n    changeYDirection():void {\n        this.speed.y= -this.speed.y\n\n    }\n    setUpDirection():void {\n        this.speed.y= -Math.abs( this.speed.y)\n    }\n    changeXDirection():void {\n        this.speed.x = -this.speed.x\n    }\n\n    moveBall(){\n        this.position.x +=this.speed.x\n        this.position.y +=this.speed.y\n    }\n\n}","import { Vector } from \"~/types\";\n\nexport class Paddle {\n    private paddleImage = new Image();\n    private moveLeft: boolean;\n    private moveRight: boolean;\n\n    constructor(\n        private speed: number,\n        private paddleWidth: number,\n        private paddleHeight: number,\n        private position: Vector,\n        image: string\n    ) {\n        this.moveLeft = false;\n        this.moveRight = false;\n        this.paddleImage.src = image;\n\n        document.addEventListener(\"keydown\", this.handleKeyDown.bind(this));\n        document.addEventListener(\"pointerdown\", this.handlePointerDown.bind(this));\n        document.addEventListener(\"keyup\", this.handleKeyUp.bind(this))\n        document.addEventListener(\"pointerup\", this.handlePointerUp.bind(this));\n    }\n\n    handlePointerDown(e : PointerEvent){\n        console.log(e);\n        if(e.x < window.innerWidth/2){\n            this.moveLeft = true;\n        }else{\n            this.moveRight = true;\n        }\n        \n    }\n    handlePointerUp(e : PointerEvent){\n        console.log(e);\n        if(e.x < window.innerWidth/2){\n            this.moveLeft = false;\n        }else{\n            this.moveRight = false;\n        }\n        \n    }\n    handleKeyDown(e: KeyboardEvent) {\n        console.log(13123);\n        \n        if (e.code === 'ArrowLeft' || e.key === 'ArrowLeft') {\n            this.moveLeft = true;\n        } if (e.code === 'ArrowRight' || e.key === 'ArrowRight') {\n            this.moveRight = true;\n        }\n    }\n\n    handleKeyUp(e: KeyboardEvent) {\n        if (e.code === 'ArrowLeft' || e.key === 'ArrowLeft') {\n            this.moveLeft = false;\n        } if (e.code === 'ArrowRight' || e.key === 'ArrowRight') {\n            this.moveRight = false;\n        }\n    }\n\n    get width(): number {\n        return this.paddleWidth\n    }\n\n    get height(): number {\n        return this.paddleHeight\n    }\n\n    get pos(): Vector {\n        return this.position\n    }\n\n    get image(): HTMLImageElement {\n        return this.paddleImage\n    }\n\n    get isMovingLeft(): boolean {\n        return this.moveLeft\n    }\n\n    get isMovingRight(): boolean {\n        return this.moveRight\n    }\n\n    movePaddle(): void {\n        if (this.moveLeft) {\n            this.position.x -= this.speed\n        }\n\n        if (this.moveRight) {\n            this.position.x += this.speed\n        }\n    }\n\n\n}","import { Ball } from '~/sprites/Ball'\nimport { Paddle } from '~/sprites/Paddle'\nimport { Brick } from '~/sprites/Brick'\n\n\nexport class CanvasView {\n    canvas: HTMLCanvasElement;\n    private context: CanvasRenderingContext2D | null;\n    private scoreDisplay: HTMLObjectElement | null;\n    private start: HTMLObjectElement | null;\n    private info: HTMLObjectElement | null;\n\n    constructor(canvasName: string) {\n\n        this.canvas = <HTMLCanvasElement>document.querySelector(canvasName)\n        this.context = this.canvas.getContext(\"2d\");\n        this.scoreDisplay = document.querySelector('#score')\n        this.start = document.querySelector('#start')\n        this.info = document.querySelector('#info')\n\n\n    }\n\n    hideStart() {\n        if(this.start){\n             this.start.style.display = 'none'\n        }\n       \n    }\n\n    showStart() {\n        if(this.start){\n            this.start.style.display = 'block'\n       }\n    }\n    clear(): void {\n        this.context?.clearRect(0, 0, this.canvas.width, this.canvas.height)\n    }\n\n    initStartButton(startFunction: (view: CanvasView) => void): void {\n        this.start?.addEventListener('click', () => { startFunction(this) })\n    }\n\n    drawScore(score: number): void {\n        if (this.scoreDisplay) {\n            this.scoreDisplay.innerHTML = score.toString()\n        }\n    }\n\n    drawInfo(info: string): void {\n        if (this.info) {\n            this.info.innerHTML = info\n        }\n    }\n\n    drawSprite(brick: Ball | Brick | Paddle) {\n        if (!brick) return\n        \n        this.context?.drawImage(\n            brick.image,\n            brick.pos.x,\n            brick.pos.y,\n            brick.width,\n            brick.height\n        )\n    }\n\n    drawBricks(bricks : Brick[]) : void{\n        // console.log(12312);\n        \n        bricks.forEach(brick => {\n            this.drawSprite(brick)\n        })\n    }\n}","import { Ball } from '~/sprites/Ball'\nimport { Paddle } from '~/sprites/Paddle'\nimport { Brick } from '~/sprites/Brick'\n\nimport { CanvasView } from '~/view/CanvasView'\n\nexport class Collision {\n\n    isCollidingBrick(ball:Ball, brick: Brick ): boolean {\n\n\n        if(\n            ball.pos.x< brick.pos.x+ brick.width &&\n            ball.pos.x+ball.width > brick.pos.x && \n            ball.pos.y + ball.height > brick.pos.y &&\n            ball.pos.y < brick.pos.y+ brick.height\n        ){\n            return true\n        }\n        return false\n    }\n\n    isCollidingBricks(ball: Ball, bricks : Array<Brick>):boolean {\n\n        let isColliding = false;\n\n        bricks.forEach((brick, index) => {\n            if(this.isCollidingBrick(ball, brick)){\n                ball.changeYDirection()\n\n                if(brick.energy === 1){\n                    bricks.splice(index, 1)\n                }else{\n                    brick.energy -= 1;\n                }   isColliding = true\n            }\n         \n\n        })\n\n        return isColliding\n\n    }\n\n    checkBallCollision(ball: Ball, paddle: Paddle, view: CanvasView): void {\n\n        if (ball.pos.x + ball.width > paddle.pos.x &&\n            ball.pos.x < paddle.pos.x + paddle.width &&\n            ball.pos.y + ball.height >= paddle.pos.y) {\n            ball.setUpDirection()\n        }\n\n        if (ball.pos.x > view.canvas.width - ball.width || ball.pos.x < 0) {\n            ball.changeXDirection()\n        }\n\n        if (ball.pos.y < 0) {\n            ball.changeYDirection()\n        }\n\n\n\n    }\n}","import RED_BRICK_IMAGE from '~/images/brick-red.png';\nimport BLUE_BRICK_IMAGE from '~/images/brick-blue.png';\nimport GREEN_BRICK_IMAGE from '~/images/brick-green.png';\nimport YELLOW_BRICK_IMAGE from '~/images/brick-yellow.png';\nimport PURPLE_BRICK_IMAGE from '~/images/brick-purple.png';\n\n// Grab the canvas element for calculating the brick width\n// depending on canvas width\n\nconst canvas: HTMLCanvasElement | null = document.querySelector('#playField');\nconst main: HTMLCanvasElement | null = document.querySelector('#main')\nlet CANVAS_WIDTH = 1000\nlet CANVAS_HEIGHT = 600\n  if(canvas && main) {\n    \n    canvas.width = window.innerWidth\n    canvas.height = window.innerHeight\n  }\n\n\n\n// Constants\nexport const STAGE_PADDING = 10;\nexport const STAGE_ROWS = 20;\nexport const STAGE_COLS = 10;\nexport const BRICK_PADDING = 5;\nexport const BRICK_WIDTH = canvas\n  ? Math.floor((canvas.width - STAGE_PADDING * 2) / STAGE_COLS) - BRICK_PADDING\n  : 100;\nexport const BRICK_HEIGHT = canvas\n  ? Math.floor((canvas.height - STAGE_PADDING * 2) / STAGE_ROWS) - BRICK_PADDING\n  : 30;\nexport const PADDLE_WIDTH = 150;\nexport const PADDLE_HEIGHT = 25;\nexport const PADDLE_STARTX = 450;\nexport const PADDLE_SPEED = 10;\nexport const BALL_SPEED = 5;\nexport const BALL_SIZE = 20;\nexport const BALL_STARTX = canvas? canvas.width * Math.random(): 400;\nexport const BALL_STARTY = canvas? canvas.height  - 50: 400;;\n\nexport const BRICK_IMAGES: { [key: number]: string } = {\n  1: RED_BRICK_IMAGE,\n  2: GREEN_BRICK_IMAGE,\n  3: YELLOW_BRICK_IMAGE,\n  4: BLUE_BRICK_IMAGE,\n  5: PURPLE_BRICK_IMAGE\n};\n\nexport const BRICK_ENERGY: { [key: number]: number } = {\n  1: 1, // Red brick\n  2: 1, // Green brick\n  3: 2, // Yellow brick\n  4: 2, // Blue brick\n  5: 3 // Purple brick\n};\n\n// prettier-ignore\nexport const LEVEL = [\n  0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n  0, 0, 1, 1, 1, 1, 1, 1, 0, 0,\n  0, 2, 2, 2, 2, 2, 2, 2, 2, 0,\n  0, 3, 3, 3, 3, 3, 3, 3, 3, 0,\n  0, 0, 4, 4, 4, 4, 4, 4, 0, 0, \n  0, 0, 5, 5, 0, 0, 5, 5, 0, 0,\n];\n","import { Vector } from \"~/types\";\n\nexport class Brick{\n    private brickImage = new Image();\n\n\n    constructor(\n\n        private brickWidth: number,\n        private brickHeight: number,\n        private position: Vector,\n        private brickEnergy: number,\n        image : string\n    ){\n       \n        \n        this.brickImage.src = image;\n    }\n\n    get width(): number {\n        return this.brickWidth\n    }\n\n    get height(): number {\n        return this.brickHeight\n    }\n\n    get pos(): Vector {\n        return this.position\n    }\n\n    get energy(): number {\n        return this.brickEnergy\n    }\n\n    get image(): HTMLImageElement {\n        //  console.log(this.brickImage);\n        \n        return this.brickImage\n    }\n\n\n    set energy(energy: number){\n        this.brickEnergy = energy \n    }\n}","import { Brick } from '~/sprites/Brick'\nimport {\n    BRICK_IMAGES,\n    LEVEL,\n    STAGE_COLS,\n    STAGE_PADDING,\n    BRICK_WIDTH,\n    BRICK_HEIGHT,\n    BRICK_PADDING,\n    BRICK_ENERGY\n} from '~/setup'\n\nexport function createBricks(): Array<Brick> {\n    return LEVEL.reduce((acc: Array<Brick>, cell: number, i: number): Array<Brick> => {\n        const row = Math.floor((i + 1) / STAGE_COLS);\n        const col = i % STAGE_COLS;\n\n        const x = STAGE_PADDING + col * (BRICK_PADDING + BRICK_WIDTH)\n        const y = STAGE_PADDING + row * (BRICK_HEIGHT + BRICK_PADDING);\n\n        if (cell === 0) return acc\n\n        return [...acc, new Brick(BRICK_WIDTH, BRICK_HEIGHT, { x, y }, BRICK_ENERGY[cell], BRICK_IMAGES[cell])]\n\n\n\n\n    }, [] as Array<Brick>)\n}","import { Ball } from '~/sprites/Ball'\nimport { Paddle } from '~/sprites/Paddle'\nimport { Brick } from '~/sprites/Brick'\n\nimport { CanvasView } from '~/view/CanvasView'\nimport { Collision } from '~/Collision'\nimport PADDLE_IMAGE from '~/images/paddle.png'\nimport BALL_IMAGE from '~/images/ball.png'\n\nimport {\n    PADDLE_SPEED,\n    PADDLE_WIDTH, PADDLE_HEIGHT,\n    PADDLE_STARTX,\n    BALL_SPEED, BALL_SIZE, BALL_STARTX, BALL_STARTY\n} from '~/setup'\n\nimport { createBricks } from '~/helpers'\n\nclass Game {\n    gameover = false\n    score = 0\n    view: CanvasView\n\n    constructor() {\n        this.view = new CanvasView('#playField')\n\n        this.view.initStartButton(this.startGame.bind(this))\n    }\n    setGameOver(view: CanvasView) {\n        view.drawInfo('Game over!')\n        this.gameover = false;\n    }\n\n    setGameWin(view: CanvasView) {\n        view.drawInfo('Game won!')\n        this.gameover = false;\n    }\n\n\n    gameLoop(view: CanvasView,\n        paddle: Paddle,\n        ball: Ball,\n        bricks: Brick[], collision: Collision) {\n\n\n        view.clear()\n        // console.log(bricks);\n\n        view.drawBricks(bricks)\n        view.drawSprite(paddle)\n        view.drawSprite(ball)\n\n\n        ball.moveBall()\n\n\n        if ((paddle.isMovingLeft && paddle.pos.x > 0) || (paddle.isMovingRight && paddle.pos.x < view.canvas.width - paddle.width)) {\n            paddle.movePaddle()\n        }\n\n\n        collision.checkBallCollision(ball, paddle, view)\n\n        const colliding = collision.isCollidingBricks(ball, bricks)\n\n        if (colliding) {\n            \n\n            this.score += 1\n            view.drawScore(this.score)\n        }\n\n        if(bricks.length === 0 || ball.pos.y > view.canvas.height){\n            this.gameover = true\n            view.showStart()\n        }\n\nif(this.gameover) return\n        requestAnimationFrame(() => {\n            this.gameLoop(view, paddle, ball, bricks, collision)\n        })\n    }\n\n    startGame(view: CanvasView) {\n        console.log(\"Start here!\");\n        this.gameover = false\n        view.hideStart()\n        this.score = 0\n        view.drawInfo('')\n        view.drawScore(0);\n\n\n        const collision = new Collision()\n\n\n        const bricks = createBricks()\n\n        const ball = new Ball(BALL_SIZE, { x: BALL_STARTX, y: BALL_STARTY }, BALL_SPEED, BALL_IMAGE)\n\n\n        const paddle = new Paddle(PADDLE_SPEED, PADDLE_WIDTH, PADDLE_HEIGHT, {\n            x: PADDLE_STARTX,\n            y: view.canvas.height - PADDLE_HEIGHT - 5\n        }, PADDLE_IMAGE)\n\n\n        this.gameLoop(view, paddle, ball, bricks, collision)\n\n    }\n}\nsetTimeout(() => {\n    const game = new Game()\n    // Start here\n}, 100)\n\n\n\n\n\n\n"]}